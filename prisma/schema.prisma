generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  brand        String
  category     String
  countInStock Int
  description  String
  imageUrl     String
  name         String
  price        Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  CartItem     CartItem[]
  OrderItems   OrderItems[]

  @@map("products")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  userId    String?    @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("carts")
}

model Orders {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String         @db.ObjectId
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentInfo   PaymentInfo?
  deliveryInfo  DeliveryData?
  userOrderInfo UserOrderInfo?
  orderItems    OrderItems[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("orders")
}

model UserOrderInfo {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  order   Orders  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId String  @unique @db.ObjectId
  name    String?
  email   String?
  phone   String?

  @@map("user_order_info")
}

model OrderItems {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String?  @db.ObjectId
  order     Orders?  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

model PaymentInfo {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  uuid                String?   @unique
  paymentStatus       String?
  total_summ          Float?
  yooPaymentId        String?   @unique
  yooPaymentCreatedAt DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  order               Orders    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId             String    @unique @db.ObjectId

  @@map("paymentinfo")
}

model DeliveryData {
  id                         String  @id @default(auto()) @map("_id") @db.ObjectId
  order                      Orders  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId                    String  @unique @db.ObjectId
  deliveryMethod             String?
  country                    String?
  country_iso_code           String?
  region_fias_id             String?
  region_kladr_id            String?
  region_with_type           String?
  city_fias_id               String?
  city_kladr_id              String?
  city_with_type             String?
  // данные о поставщиках
  city_boxberry_id           Int?
  city_cdek_id               Int?
  city_dpd_id                Int?
  // Данные выбранном о ПВЗ
  sdek_pvz_code              String?
  sdek_pvz_uuid              String?
  sdek_pvz_work_time         String?
  sdek_pvz_type              String?
  sdek_pvz_address_full      String?
  sdek_pvz_longitude         Float?
  sdek_pvz_latitude          Float?
  // Данные о выбраном адресе
  address_unrestricted_value String?
  address_postal_code        Int?
  address_geo_lat            Float?
  address_geo_lon            Float?
  address_city               String?

  @@map("deliverydata")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  phonenumber   String?
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  orders        Orders[]
  userAddress   UserAddress?

  @@map("user")
}

model UserAddress {
  id                         String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                     String? @unique @db.ObjectId
  user                       User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  deliveryMethod             String?
  country                    String?
  country_iso_code           String?
  region_fias_id             String?
  region_kladr_id            String?
  region_with_type           String?
  city_fias_id               String?
  city_kladr_id              String?
  city_with_type             String?
  // данные о поставщиках
  city_boxberry_id           Int?
  city_cdek_id               Int?
  city_dpd_id                Int?
  // Данные выбранном о ПВЗ
  sdek_pvz_code              String?
  sdek_pvz_uuid              String?
  sdek_pvz_work_time         String?
  sdek_pvz_type              String?
  sdek_pvz_address_full      String?
  sdek_pvz_longitude         Float?
  sdek_pvz_latitude          Float?
  // Данные о выбраном адресе
  address_unrestricted_value String?
  address_postal_code        Int?
  address_geo_lat            Float?
  address_geo_lon            Float?
  address_city               String?

  @@map("user_address")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Sdek {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  access_token String
  token_type   String
  expires_in   DateTime
  scope        String
  jti          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sdek")
}
