generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Product {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  brand        String
  category     String
  countInStock Int
  description  String
  imageUrl     String
  name         String
  price        Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  CartItem     CartItem[]

  @@map("products")
}

model Cart {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  items        CartItem[]
  userId       String?        @db.ObjectId
  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  DeliveryData DeliveryData[]

  @@map("carts")
}

model CartItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@map("cartitems")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  phonenumber   String?
  emailVerified DateTime?
  image         String?
  role          String?
  accounts      Account[]
  sessions      Session[]
  Cart          Cart[]
  deliveryData  DeliveryData[]

  @@map("user")
}

model DeliveryData {
  id                         String  @id @default(auto()) @map("_id") @db.ObjectId
  User                       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                     String  @db.ObjectId
  Cart                       Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId                     String  @unique @db.ObjectId
  country                    String?
  country_iso_code           String?
  region_fias_id             String?
  region_kladr_id            String?
  region_with_type           String?
  city_fias_id               String?
  city_kladr_id              String?
  city_with_type             String?
  // данные о поставщиках
  city_boxberry_id           Int?
  city_cdek_id               Int?
  city_dpd_id                Int?
  // Данные выбранном о ПВЗ
  sdek_pvz_code              String?
  sdek_pvz_uuid              String?
  sdek_pvz_work_time         String?
  sdek_pvz_type              String?
  sdek_pvz_address_full      String?
  sdek_pvz_longitude         Float?
  sdek_pvz_latitude          Float?
  // Данные о выбраном адресе
  address_unrestricted_value String?
  address_postal_code        Int?
  address_geo_lat            Float?
  address_geo_lon            Float?
  address_city               String?

  @@map("deliverydata")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Sdek {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  access_token String
  token_type   String
  expires_in   DateTime
  scope        String
  jti          String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sdek")
}
